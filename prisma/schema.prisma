// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String    @id @default(cuid())
    name      String
    email     String    @unique
    password  String
    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    posts     Post[]
    accounts  Account[]
    sessions  Session[]

    @@map(name: "users")
}

model Post {
    id        String  @id @default(cuid())
    title     String
    content   String?
    published Boolean @default(false)
    author    User?   @relation(fields: [authorId], references: [id])
    authorId  String?

    @@map(name: "post")
}

model Customer {
    id        String    @id @default(cuid())
    name      String
    email     String
    image_url String
    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    invoices  Invoice[]

    @@map(name: "customers")
}

model Invoice {
    id          String   @id @default(cuid())
    customer    Customer @relation(fields: [customer_id], references: [id])
    customer_id String
    date        DateTime
    amount      Int
    status      String
    createdAt   DateTime @default(now()) @map(name: "created_at")
    updatedAt   DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "invoices")
}

model Revenue {
    id        String   @id @default(cuid())
    month     String
    revenue   Int
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "revenues")
}

model Lead {
    id                     String   @id @default(cuid())
    firstName              String
    lastName               String
    email                  String
    phone                  String
    status                 String
    //leadSource  String
    //company     String
    //position    String
    //industry    String
    estimatedBudget        BigInt
    notes                  String
    leadScore              Int
    lastContactDate        DateTime
    nextFollowUpDate       DateTime
    preferredContactMethod String
    assignedTo             String
    //campaign    String    
    tags                   Tag[]    @relation("lead_tags")

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "leads")
}

model LeadStatus {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "lead_status")
}

// model LeadTag {
//     id        String   @id @default(cuid())
//     name      String

//     createdAt DateTime @default(now()) @map(name: "created_at")
//     updatedAt DateTime @updatedAt @map(name: "updated_at")

//     @@map(name: "lead_tags")
// }

model Tag {
    id    String @id @default(cuid())
    name  String
    color String
    lead  Lead[] @relation("lead_tags")

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "tags")
}
